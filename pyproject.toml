[project]
name = "rag-master-class"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "boto3>=1.40.40",
    "chromadb>=1.1.0",
    "faiss-cpu>=1.12.0",
    "langchain>=0.3.27",
    "langchain-community>=0.3.30",
    "langchain-core>=0.3.76",
    "langchain-docling>=1.1.0",
    "langchain-text-splitters>=0.3.11",
    "llama-index>=0.14.3",
    "notebook>=7.4.7",
    "numpy>=2.3.3",
    "pinecone>=7.3.0",
    "pymupdf>=1.26.4",
    "python-dotenv>=1.1.1",
    "qdrant-client>=1.15.1",
    "requests>=2.32.5",
    "ruff==0.13.2",
    "weaviate-client>=4.17.0",
]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "detect-secrets>=1.5.0",
    "pre-commit>=4.3.0",
    "pyright>=1.1.405",
    "ruff>=0.13.2",
    "safety>=3.6.2",
]

[tool.pyright]
exclude = [".venv"]
pythonVersion = "3.13"
venvPath = "."
venv = ".venv"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    # Project-specific excludes
    "migrations/",
    "*.pb2.py",
    "static/",
    "media/",
]

# Code formatting
line-length = 88
indent-width = 4
target-version = "py313"

# CLI usage examples:
# uv run ruff check . --fix --show-fixes --show-files
# uv run ruff format .
# uv run ruff check . --output-format=grouped

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Use tabs for indentation (your original preference)
# Change to "space" if you prefer spaces instead
indent-style = "tab"
# Skip magic trailing comma for single-element collections
skip-magic-trailing-comma = false
# Format code snippets in docstrings
docstring-code-format = true
# Respect project's line ending preference
line-ending = "auto"
# Format code in docstrings with dynamic line length
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
# Enable comprehensive rule sets for production code
select = [
    # Pyflakes (essential errors)
    "F",
    # pycodestyle errors and warnings
    "E",
    "W",
    # mccabe (complexity)
    "C90",
    # isort (import sorting)
    "I",
    # pep8-naming (naming conventions)
    "N",
    # pyupgrade (modern Python idioms)
    "UP",
    # flake8-2020 (sys.version_info comparisons)
    "YTT",
    # flake8-annotations (type annotations)
    "ANN",
    # flake8-async (async/await issues)
    "ASYNC",
    # flake8-bandit (security)
    "S",
    # flake8-blind-except (bare except)
    "BLE",
    # flake8-boolean-trap (boolean parameters)
    "FBT",
    # flake8-bugbear (common bugs)
    "B",
    # flake8-builtins (builtin shadowing)
    "A",
    # flake8-commas (trailing commas)
    "COM",
    # flake8-comprehensions (comprehension improvements)
    "C4",
    # flake8-datetimez (datetime without timezone)
    "DTZ",
    # flake8-debugger (debugger imports)
    "T10",
    # flake8-django (Django best practices)
    "DJ",
    # flake8-errmsg (error message best practices)
    "EM",
    # flake8-executable (executable permissions)
    "EXE",
    # flake8-future-annotations (future annotations)
    "FA",
    # flake8-implicit-str-concat (implicit string concatenation)
    "ISC",
    # flake8-import-conventions (import naming)
    "ICN",
    # flake8-logging-format (logging format)
    "G",
    # flake8-no-pep420 (implicit namespace packages)
    "INP",
    # flake8-pie (miscellaneous improvements)
    "PIE",
    # flake8-print (print statements)
    "T20",
    # flake8-pyi (type stub files)
    "PYI",
    # flake8-pytest-style (pytest best practices)
    "PT",
    # flake8-quotes (quote consistency)
    "Q",
    # flake8-return (return statement improvements)
    "RET",
    # flake8-raise (raise statement improvements)
    "RSE",
    # flake8-self (private member access)
    "SLF",
    # flake8-simplify (code simplification)
    "SIM",
    # flake8-type-checking (TYPE_CHECKING imports)
    "TCH",
    # flake8-tidy-imports (import organization)
    "TID",
    # flake8-unused-arguments (unused arguments)
    "ARG",
    # flake8-use-pathlib (pathlib usage)
    "PTH",
    # pandas-vet (pandas best practices)
    "PD",
    # pygrep-hooks (regex-based checks)
    "PGH",
    # Pylint (additional static analysis)
    "PL",
    # tryceratops (exception handling)
    "TRY",
    # flynt (f-string conversion)
    "FLY",
    # NumPy-specific rules
    "NPY",
    # Airflow-specific rules (if using Airflow)
    "AIR",
    # Perflint (performance)
    "PERF",
    # refurb (modernization)
    "FURB",
    # flake8-logging (logging best practices)
    "LOG",
    # Ruff-specific rules
    "RUF",
]

# Rules to ignore for team flexibility
ignore = [
    # Type annotation rules (can be overwhelming initially)
    "ANN401",  # Dynamically typed expressions (Any) are disallowed

    # Documentation rules (adjust based on team preference)
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method

    # Complexity rules (can be adjusted based on team standards)
    "C901",    # Function is too complex
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements

    # Security rules - adjusted since you're using Bandit separately
    "S101",    # Use of assert detected (useful in tests, Bandit will catch real issues)
    "S603",    # subprocess call: check for execution of untrusted input (Bandit handles this better)

    # Print statements (useful during development)
    "T201",    # print found
    "T203",    # pprint found

    # Boolean trap (sometimes necessary)
    "FBT001",  # Boolean positional argument in function definition
    "FBT002",  # Boolean default value in function definition

    # Magic value comparisons (common in config/constants)
    "PLR2004", # Magic value used in comparison

    # Exception handling (sometimes broad except is needed)
    "BLE001",  # Do not catch blind exception

    # Import rules that might conflict with project structure
    "TID252",  # Relative imports from parent modules are banned

    # Formatter compatibility rules
    "COM812",  # trailing-comma-missing (conflicts with formatter)
    "W191",    # tab-indentation (conflicts with tab indent-style)
]

# Allow fix for most rules
fixable = [
    "A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W",
    "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT",
    "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH",
    "PYI", "RET", "RSE", "RUF", "SIM", "TID", "TCH", "TRY", "UP"
]

# Avoid trying to fix these rules (can cause issues)
unfixable = [
    "F841",    # Unused variable (might be intentional)
    "F401",    # Unused import (might be re-exported)
    "ERA001",  # Commented-out code (manual review needed)
]

# Variables to consider unused
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Test files - coordinated with your other tools
"tests/**/*" = [
    "S101",    # asserts allowed in tests (Bandit will handle security)
    "ARG",     # Unused function args (fixtures)
    "FBT",     # Boolean positional args ok in tests
    "PLR2004", # Magic value comparisons ok in tests
    "S311",    # Standard pseudo-random generators ok for tests
    "SLF001",  # Private member access (testing internals)
    "S105",    # Hardcoded password strings (false positives in test data)
    "S106",    # Hardcoded password strings (test fixtures)
]

# Scripts and utilities
"scripts/**/*" = [
    "T201",    # Print statements ok in scripts
    "S602",    # subprocess calls ok in scripts
    "PLR0913", # Many arguments ok in CLI scripts
]

# Configuration files
"**/config/**/*" = [
    "PLR0913", # Many arguments ok in config
    "S105",    # Hardcoded password strings (false positives in config examples)
]

# Migration files (Django/Alembic)
"**/migrations/**/*" = [
    "ARG001",  # Unused function arguments
    "N806",    # Variable names (Django migrations style)
]

# Example/demo files
"examples/**/*" = [
    "T201",    # Print statements ok in examples
    "INP001",  # Implicit namespace package (examples don't need __init__.py)
]

[tool.ruff.lint.flake8-annotations]
# Require annotations for public functions but not simple cases
allow-star-arg-any = false
ignore-fully-untyped = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-bandit]
# Security settings
check-typed-exception = true

[tool.ruff.lint.flake8-bugbear]
# Extend immutable calls for better checking
extend-immutable-calls = [
    "chr", "typer.Argument", "typer.Option",
    "fastapi.Depends", "fastapi.Query", "fastapi.Path"
]

[tool.ruff.lint.flake8-builtins]
# Builtins to avoid shadowing
builtins-ignorelist = ["id", "input", "open", "type"]

[tool.ruff.lint.flake8-comprehensions]
# Comprehension improvements
allow-dict-calls-with-keyword-arguments = false

[tool.ruff.lint.flake8-errmsg]
# Error message formatting
max-string-length = 20

[tool.ruff.lint.flake8-import-conventions]
# Import naming conventions
aliases = { numpy = "np", pandas = "pd", matplotlib = "plt", seaborn = "sns", plotly = "px", tensorflow = "tf", torch = "torch", "matplotlib.pyplot" = "plt" }

[tool.ruff.lint.flake8-pytest-style]
# Pytest style configuration
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "tuple"
parametrize-values-type = "tuple"
parametrize-values-row-type = "tuple"

[tool.ruff.lint.flake8-quotes]
# Quote style (should match formatter)
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
# Import organization
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
# Type checking imports
strict = false
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "sqlalchemy.orm.DeclarativeBase"
]

[tool.ruff.lint.isort]
# Import sorting (similar to black + isort)
combine-as-imports = true
force-single-line = false
force-wrap-aliases = true
known-first-party = ["your_project_name"]  # Replace with your project name
known-third-party = []
required-imports = ["from __future__ import annotations"]
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
# Maximum allowed complexity
max-complexity = 10

[tool.ruff.lint.pep8-naming]
# Naming conventions
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
    "pydantic.field_validator",
]

[tool.ruff.lint.pycodestyle]
# Line length settings
ignore-overlong-task-comments = true
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
# Docstring style (Google style)
convention = "google"

[tool.ruff.lint.pylint]
# Pylint-style checks
allow-magic-value-types = ["int", "str", "bytes"]
max-args = 7
max-branches = 15
max-returns = 8
max-statements = 60
